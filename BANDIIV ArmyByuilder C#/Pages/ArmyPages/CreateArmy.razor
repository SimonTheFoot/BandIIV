@page "/CreateArmy"
<h3>CreateArmy</h3>
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Runtime.CompilerServices
@inject IHttpClientFactory ClientFactory


<h5 style="font-size: 18px">Select an area</h5>

@if (getBranchesError)
{
    <p>Unable to get data.</p>
}
else
{
    <select size="1" name="areaName" width="20" style="font-size: 12px" @onchange="@( (e) => filterArmies(e) )">
        @foreach (var areaName in AreaNamesEnumerable)
        {
            <option value="@areaName.AreaId" style="font-size: 12px">@areaName.AreaName</option>
        }
    </select>
}
<h5 style="font-size: 18px">Select an army</h5>
@if (getBranchesError)
{
    <p>Unable to get data.</p>
}
else
{
    <select size="1" name="armyName" style="font-size: 12px" @onchange="@((e) => filterTroops(e))">
        @foreach (var army in FilteredArmyNamesEnumerable)
        {
            <option value="@army.ArmyId" style="font-size: 12px">@army.ArmyName</option>
        }
    </select>
}
<h5 style="font-size: 18px">Add troops</h5>

@if (getBranchesError)
{
    <p>Unable to get data.</p>
}
else
{
    <select size="1" width="20" style="font-size: 12px" name="troopList">
        @foreach (var troop in FilteredTroopEnumerable)
        {
            <option value="@troop.TroopID" style="font-size: 12px">@troop.TroopName</option>
        }
    </select>
 
}

<h5 style="font-size: 18px">Add Officer</h5>
<select style="font-size: 12px">
    <option value="2" style="font-size: 12px">Army Commander</option>
    <option value="3" style="font-size: 12px">Corps Commander</option>
    <option value="4" style="font-size: 12px">Divisional Commander</option>
    <option value="5" style="font-size: 12px">Brigade Commander</option>
</select>
@code {

}

@code {
    private IEnumerable<Areas> AreaNamesEnumerable = System.Array.Empty<Areas>();
    private IEnumerable<Armies> ArmyNamesEnumerable = System.Array.Empty<Armies>();
    private IEnumerable<Armies> FilteredArmyNamesEnumerable = System.Array.Empty<Armies>();
    private IEnumerable<Troop> TroopEnumerable = System.Array.Empty<Troop>();
    private IEnumerable<Troop> FilteredTroopEnumerable = System.Array.Empty<Troop>();
    private string armyFilter { get; set; } = string.Empty;
    private string troopFilter { get; set; } = string.Empty;
    private bool getBranchesError;
    private bool shouldRender;
 
    protected override bool ShouldRender() => shouldRender;
    
    protected override async Task OnInitializedAsync()
    {
    //  request.Headers.Add("Accept", "application/vnd.github.v3+json");
    //  request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
        var requestArea = new HttpRequestMessage(HttpMethod.Get,
            "https://bloodandiron.co.uk/fixed/Areas");
            
        var clientArea = ClientFactory.CreateClient();
        var responseArea = await clientArea.SendAsync(requestArea);
        if (responseArea.IsSuccessStatusCode)
        {
            using var responseStream = await responseArea.Content.ReadAsStreamAsync();
            AreaNamesEnumerable = await JsonSerializer.DeserializeAsync
                <IEnumerable<Areas>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }

        var requestArmy = new HttpRequestMessage(HttpMethod.Get,
            "https://bloodandiron.co.uk/fixed/Armies");

        var client = ClientFactory.CreateClient();

        var responseArmy = await client.SendAsync(requestArmy);

        if (responseArmy.IsSuccessStatusCode)
        {
            using var responseStream = await responseArmy.Content.ReadAsStreamAsync();
            ArmyNamesEnumerable = await JsonSerializer.DeserializeAsync
                <IEnumerable<Armies>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }

        var requestTroop = new HttpRequestMessage(HttpMethod.Get,
            "https://bloodandiron.co.uk/fixed/troops");

        var clientTroop = ClientFactory.CreateClient();

        var responseTroop = await clientTroop.SendAsync(requestTroop);

        if (responseTroop.IsSuccessStatusCode)
        {
            using var responseStream = await responseTroop.Content.ReadAsStreamAsync();
            TroopEnumerable = await JsonSerializer.DeserializeAsync
                <IEnumerable<Troop>>(responseStream);
            // correct the silly original case structure
            CultureInfo currentCulture = System.Threading.Thread.CurrentThread.CurrentCulture;
            foreach (var troop in TroopEnumerable)
            {
                troop.TroopName=currentCulture.TextInfo.ToTitleCase(troop.TroopName.ToLower());
            }
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

    async Task filterArmies(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        armyFilter = e.Value.ToString();
        FilteredArmyNamesEnumerable = null;
    //    FilteredTroopEnumerable = null;
        FilteredArmyNamesEnumerable = ArmyNamesEnumerable.Where(c => c.Group.ToString().Contains(armyFilter));
    }
    async Task filterTroops(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        troopFilter = e.Value.ToString();
        FilteredTroopEnumerable = null;
        FilteredTroopEnumerable = TroopEnumerable.Where(c => c.ArmyID.ToString().Contains(troopFilter));

    }
    
    public class Areas
    {
        [Required]
        [JsonPropertyName("areaName")]
        public string AreaName { get; set; }
        [Required]
        [JsonPropertyName("areaId")]
        public int AreaId { get; set; }
    }
    public class Armies
    {

        [Required]
        [JsonPropertyName("armyId")]
        public Int32 ArmyId { get; set; }

        [Required]
        [JsonPropertyName("armyName")]
        [MaxLength(50)]
        public String ArmyName { get; set; }

        [Required]
        [JsonPropertyName("v1")]
        public Int32 v1 { get; set; }

        [Required]
        [JsonPropertyName("language")]
        public Int32 Language { get; set; }

        [Required]
        [JsonPropertyName("type")]
        public Int32 Type { get; set; }

        [Required]
        [JsonPropertyName("group")]
        public int Group { get; set; }
    }

    public class Troop
    {
        [Required]   
        [JsonPropertyName("armyID")]
        public Int32 ArmyID { get; set; }

        [Required]   [JsonPropertyName("troopID")]
        public Int32 TroopID { get; set; }

        [Required]   [JsonPropertyName("troopName")]
        [MaxLength(50)]
        public String TroopName { get; set; }

        [Required]   [JsonPropertyName("troopType")]
        public Int32 TroopType { get; set; }

        [Required]   [JsonPropertyName("troopClass")]
        public Int32 TroopClass { get; set; }

        [Required]   [JsonPropertyName("experience")]
        public Int32 Experience { get; set; }

        [Required]   [JsonPropertyName("formation")]
        public Int32 Formation { get; set; }

        [Required]   [JsonPropertyName("subUnits")]
        public Int32 SubUnits { get; set; }

        [Required]   [JsonPropertyName("meninSubUnit")]
        public Int32 MeninSubUnit { get; set; }

        [Required]   [JsonPropertyName("numberofGuns")]
        public Int32 NumberofGuns { get; set; }

        [Required]   [JsonPropertyName("percentageWithPrimaryWeapon")]
        public Int32 PercentageWithPrimaryWeapon { get; set; }

        [Required]   [JsonPropertyName("secondaryMissileWeapon")]
        public Int32 SecondaryMissileWeapon { get; set; }

        [Required]   [JsonPropertyName("armour")]
        public Int32 Armour { get; set; }

        [Required]   [JsonPropertyName("commandControl")]
        public Int32 CommandControl { get; set; }

        [Required]   [JsonPropertyName("confidence")]
        public Int32 Confidence { get; set; }

        [Required]   [JsonPropertyName("steadyness")]
        public Int32 Steadyness { get; set; }

        [Required]   [JsonPropertyName("aggression")]
        public Int32 Aggression { get; set; }

        [Required]   [JsonPropertyName("officerRank")]
        public Int32 OfficerRank { get; set; }

        [Required]   [JsonPropertyName("primaryMissileWeapon")]
        public Int32 PrimaryMissileWeapon { get; set; }

        [Required]   [JsonPropertyName("meleeWeapon")]
        public Int32 MeleeWeapon { get; set; }

        [Required]   [JsonPropertyName("fireDiscipline")]
        public Int32 FireDiscipline { get; set; }

        [Required]   [JsonPropertyName("language")]
        public Int32 Language { get; set; }

        [Required]   [JsonPropertyName("ammo")]
        public Int32 Ammo { get; set; }


    }
}}